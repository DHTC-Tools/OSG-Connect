#!/bin/bash
# Marco Mambelli - marco@hep.uchciago.edu

JOB_ID=JOB_ID
PLOT_DIR=$HOME/data/public
PLOT_TYPE=pie
# previous dimensions 300 x 400
PLOT_WIDTH=1000
PLOT_HEIGHT=1200
PLOT_CUT=100
PLOT_LABEL=number
DEFAULT_PLOT_TITLE='eval "echo Distribution for job \$JOB_ID"'
#DEFAULT_FILE_NAME='eval "echo chart_\${PLOT_TYPE}_\${${JOB_ID}}.html"'
DEFAULT_FILE_NAME='eval "echo chart_\${PLOT_TYPE}_\${JOB_ID}.html"'
VALID_PLOT_TYPES="table,pie,bar,tmap"
#COMMAND_PRE="condor_history -format '%s ' CommittedTime -format '%s\\n' LastRemoteHost"
#COMMAND_POST=""


function help_msg {
  FILE_NAME=`eval $DEFAULT_FILE_NAME`
  PLOT_TITLE=`eval $DEFAULT_PLOT_TITLE`
  cat << EOF
$0 [ options ] JOB_ID
$0 [ options ] -f CONST [ JOB_ID ]
$0 [ options ] -i FILE [ JOB_ID ]
Options:
 -d DIR   set an alternative output directory (Def: $PLOT_DIR)
 -p PLOT  set the plot type [$VALID_PLOT_TYPES] (Def: pie)
 -n NAME  set a different plot file name (Default: $FILE_NAME)
 -t TITLE set a different title (Default: $PLOT_TITLE)
 -c CUT   cut to the first CUT entries (Default: $PLOT_CUT)
 -l MOD   label modifier [number,plain,onelevel,domain,validdomain,notime] (Def: $PLOT_LABEL)
 -w WIDTH set width (Default: $PLOT_WIDTH)
 -h HEIGHT set height (Default: $PLOT_HEIGHT)
 -g       group domain names
 -i FILE  get the input from file instead of 
"condor_history -format '%s ' CommittedTime -format '%s\\n' LastRemoteHost JOB_ID" 
 -f CONST constraints classad to filter jobs (passed to condor_history)" 
 -q       quiet
 -?       print this help message
Examples:
 condor_plot -p tmap -l number -t 'Tree map proportional to the number of jobs' 30806
 condor_plot -p pie -i ./ptp -c 100 -g 30806bis
 condor_plot -p bar -h 2000 30806
EOF
}
# -s       sort by Site instead of job count


# add width/height
while getopts ?h:w:d:p:n:t:c:gl:i:f:q option
do
  case "${option}"
  in 
  "?") help_msg; exit 0;;
  "d") PLOT_DIR=${OPTARG};;
  "p") PLOT_TYPE=${OPTARG};;
  "n") FILE_NAME=${OPTARG};;
  "t") PLOT_TITLE=${OPTARG};;
  "c") PLOT_CUT=${OPTARG};;
  "w") PLOT_WIDTH=${OPTARG};;
  "h") PLOT_HEIGHT=${OPTARG};;
  "g") PLOT_GROUP=2;;
  "l") PLOT_LABEL=${OPTARG};;
  "i") INPUT_FILE=${OPTARG};;
  "f") JOB_CONSTRAINT="-constraint ${OPTARG}";;
  "q") QUIET_RUN=yes;;
  esac
done

shift $((OPTIND-1))

# Check arguments
if [ -z $1 ]; then
  if [ -z $INPUT_FILE ]; then
    if [ -z $JOB_CONSTRAINT ]; then
      echo "Missing JOB_ID"
      help_msg
      exit 1
    else
      JOB_ID="JobSelection"
    fi
  else
    JOB_ID="JobFile_`basename $INPUT_FILE`"
  fi
else
  JOB_ID=$1
fi


# Check paramaters
if [ -z $FILE_NAME ]; then
  FILE_NAME=`eval $DEFAULT_FILE_NAME`
fi

if [ -z "$PLOT_TITLE" ]; then
  PLOT_TITLE=`eval $DEFAULT_PLOT_TITLE`
fi

if [ -n $PLOT_TYPE ]; then
  if [ "x$PLOT_TYPE" == "xpie" ]; then
    PLOT_TYPE=PieChart
  elif [ "x$PLOT_TYPE" == "xbar" ]; then
    PLOT_TYPE=BarChart
  elif [ "x$PLOT_TYPE" == "xtable" ]; then
    PLOT_TYPE=Table
  elif [ "x$PLOT_TYPE" == "xtmap" ]; then
    PLOT_TYPE=TreeMap
  else
    echo "Unsupported plot type: $PLOT_TYPE not in [$VALID_PLOT_TYPES]."
    help_msg
    exit 1
  fi
fi 

# Return the last 2 substrings in a dot separated string ($1)
# if $2 == local, return "NA (local)" for all XXXX.local strings
# if $2 == noloop, return "Global" if $1 has no "." (to avoid loops in TreeMaps
function filter_domain {
  NO_REAL_DOMAIN="NA (no valid domain)"
  if [ "x$2" == "xlocal" ]; then
    if [ "x${1##*.}" == "xlocal" ]; then
      echo $NO_REAL_DOMAIN
      return
    fi
    if [ "x${1##*.}" == "x$1" ]; then
      echo $NO_REAL_DOMAIN
      return
    fi
  fi
  if [ "x$2" == "xonelevel" ]; then
    retv=${1#*.}
  else
    retv=`echo "..$1" |  sed -r 's/.*([^.]*)\.([^.]*)\.([^.]*)/\2.\3/' | sed 's/^\.*//'`
  fi
  if [ "x$retv" == "x$1" ]; then
    echo "Global"
    return
  fi
  echo "$retv"
}

## Do the plot
 
if [ -z $QUIET_RUN ];then
  echo "Plotting '$PLOT_TITLE' to $PLOT_DIR/$FILE_NAME (job: $JOB_ID, ${PLOT_WIDTH}x${PLOT_HEIGHT} $PLOT_TYPE)"
fi

## Retrieve HTCondor history

if [ -z $INPUT_FILE ]; then 
  INPUT_FILE=`mktemp -u tmp.cplot.XXXXXXXXXX`
  TMP_FILE_TODEL=$INPUT_FILE
  condor_history -format '%s ' CommittedTime -format '%s\n' LastRemoteHost $JOB_CONSTRAINT $JOB_ID > $INPUT_FILE 
fi

## Filter the data (collecting both the counter and the sum of time dome in AWK)

if [ -z $PLOT_GROUP ]; then
  input_data=`cat $INPUT_FILE | sed 's/^0 \(0 \)*//' | awk '{bucket=gensub(/[^@]*@/, "", 1, $2); A[bucket] += $1; C[bucket] ++;} END{for (i in A) {printf "%d.%d %s\n", C[i], A[i], i;}}' | sort -nr | head -n $PLOT_CUT | sed -r 's/^( *[^ ]+) +/\1,/'`
elif [ "x$PLOT_GROUP" == "x2" ]; then
  # same as else branch
  #input_data=`cat $INPUT_FILE | cut -d@ -f2 | sed -r 's/.*([^.]*)\.([^.]*)\.([^.]*)/\2.\3/' | sed 's/^\.*//' | sort | uniq -c | sort -nr | head -n $PLOT_CUT | sed -r 's/^( *[^ ]+) +/\1,/'`
  input_data=`cat $INPUT_FILE | sed 's/^0 \(0 \)*//' | awk '{prebucket=gensub(/[^@]*@/, "", 1, $2); bucket=gensub(/.*([^.]*)\.([^.]*)\.([^.]+)\.*/, "\\\\2.\\\\3", 1, prebucket); sub(/^\.+/, "", bucket); A[bucket] += $1; C[bucket] ++;} END{for (i in A) {printf "%d.%d %s\n", C[i], A[i], i;}}' | sort -nr | head -n $PLOT_CUT | sed -r 's/^( *[^ ]+) +/\1,/'`
elif [ "x$PLOT_GROUP" == "x3" ]; then
  input_data=`cat $INPUT_FILE | sed 's/^0 \(0 \)*//' | awk '{prebucket=gensub(/[^@]*@/, "", 1, $2); bucket=gensub(/.*([^.]*)\.([^.]*)\.([^.]+)\.*/, "\\\\1.\\\\2.\\\\3", $0, prebucket); sub(/^\.+/, "", bucket); A[bucket] += $1; C[bucket] ++;} END{for (i in A) {printf "%d.%d %s\n", C[i], A[i], i;}}' | sort -nr | head -n $PLOT_CUT | sed -r 's/^( *[^ ]+) +/\1,/'`
elif [ "x$PLOT_GROUP" == "x1" ]; then
  input_data=`cat $INPUT_FILE | sed 's/^0 \(0 \)*//' | awk '{prebucket=gensub(/[^@]*@/, "", 1, $2); bucket=gensub(/.*([^.]*)\.([^.]*)\.([^.]+)\.*/, "\\\\3", 1, prebucket); sub(/^\.+/, "", bucket); A[bucket] += $1; C[bucket] ++;} END{for (i in A) {printf "%d.%d %s\n", C[i], A[i], i;}}' | sort -nr | head -n $PLOT_CUT | sed -r 's/^( *[^ ]+) +/\1,/'`
else     # same as 2
  input_data=`cat $INPUT_FILE | sed 's/^0 \(0 \)*//' | awk '{prebucket=gensub(/[^@]*@/, "", 1, $2); bucket=gensub(/.*([^.]*)\.([^.]*)\.([^.]+)\.*/, "\\\\2.\\\\3", 1, prebucket); sub(/^\.+/, "", bucket); A[bucket] += $1; C[bucket] ++;} END{for (i in A) {printf "%d.%d %s\n", C[i], A[i], i;}}' | sort -nr | head -n $PLOT_CUT | sed -r 's/^( *[^ ]+) +/\1,/'`
  #input_data=`cat $INPUT_FILE`
  # cat j37311 |sed 's/^0 \(0 \)*//' | awk '{prebucket="..." gensub(/[^@]*@/, "", 1, $2); bucket=gensub(/.*([^.]*)\.([^.]*)\.([^.]*)/, "\\2.\\3", $0, prebucket); A[bucket] += $1; C[bucket] ++; V[bucket]=prebucket;} END{for (i in A) {printf "%d.%d %s (%s)\n", C[i], A[i], i, V[i];}}' | less
fi

if [ ! -z $TMP_FILE_TODEL ]; then
  rm $TMP_FILE_TODEL
fi


## Print the plot

cat > $PLOT_DIR/$FILE_NAME << EOF 
<html>
  <head>
    <!--Load the AJAX API-->
    <script type="text/javascript" src="https://www.google.com/jsapi"></script>
    <script type="text/javascript">

      // Load the Visualization API and the core (pie,bar) and table package.
      google.load('visualization', '1.0', {'packages':['corechart']});
      google.load('visualization', '1', {packages:['table']});
      google.load("visualization", "1", {packages:["treemap"]});

      // Set a callback to run when the Google Visualization API is loaded.
      google.setOnLoadCallback(drawChart);

      // Callback that creates and populates a data table,
      // instantiates the pie chart, passes in the data and
      // draws it.
      function drawChart() {

        // Create the data table.
        var data = new google.visualization.DataTable({
EOF
if [ "x$PLOT_TYPE" == "xTreeMap" ]; then
  cat >> $PLOT_DIR/$FILE_NAME << EOF 
        cols: [ {id: 'A', label: 'Site', type: 'string'},
                {id: 'A2', label: 'parent', type: 'string'},
                {id: 'B', label: '# of jobs', type: 'number'},
                {id: 'B2', label: 'val2', type: 'number'}],
        rows: [ {c:[{v: 'Global'}, {v: null}, {v: 0}, {v: 0}]},
EOF
  TMP_FILE=`mktemp -u tmp.cplot.XXXXXXXXXX`  
  for i in $input_data; do
    if [ "x$PLOT_LABEL" == "xonelevel" ]; then
      tmp1=${i#*,}
      echo "         {c:[{v: '`filter_domain $tmp1 onelevel`'}, {v: 'Global'}, {v: 0}, {v: 0}]},"  >> $TMP_FILE
      tmp=${i%,*}
      echo "         {c:[{v: '${i#*,}'}, {v: '`filter_domain $tmp1 onelevel`'}, {v: ${tmp%.*}}, {v:  ${tmp#*.}/${tmp%.*}}]},"  >> $TMP_FILE
    elif [ "x$PLOT_LABEL" == "xdomain" ]; then 
      echo "         {c:[{v: '`filter_domain ${i#*,}`'}, {v: 'Global'}, {v: 0}, {v: 0}]},"  >> $TMP_FILE
      tmp=${i%,*}
      echo "         {c:[{v: '${i#*,}'}, {v: '`filter_domain ${i#*,}`'}, {v: ${tmp%.*}}, {v:  ${tmp#*.}/${tmp%.*}}]},"  >> $TMP_FILE
    elif [ "x$PLOT_LABEL" == "xvaliddomain" ]; then
      echo "         {c:[{v: '`filter_domain ${i#*,} local`'}, {v: 'Global'}, {v: 0}, {v: 0}]},"  >> $TMP_FILE
      tmp=${i%,*}
      echo "         {c:[{v: '${i#*,}'}, {v: '`filter_domain ${i#*,} local`'}, {v: ${tmp%.*}}, {v:  ${tmp#*.}/${tmp%.*}}]},"  >> $TMP_FILE
    elif [ "x$PLOT_LABEL" == "xnotime" ]; then
      tmp1=${i#*,}
      echo "         {c:[{v: '`filter_domain $tmp1 onelevel`'}, {v: 'Global'}, {v: 0}, {v: 0}]},"  >> $TMP_FILE
      tmp=${i%,*}
      echo "         {c:[{v: '${i#*,}'}, {v: '`filter_domain $tmp1 onelevel`'}, {v: ${tmp%.*}}, {v: 0}]},"  >> $TMP_FILE
    else     # same as validdomain
      echo "         {c:[{v: '`filter_domain ${i#*,} local`'}, {v: 'Global'}, {v: 0}, {v: 0}]},"  >> $TMP_FILE
      tmp=${i%,*}
      echo "         {c:[{v: '${i#*,}'}, {v: '`filter_domain ${i#*,} local`'}, {v: ${tmp%.*}}, {v:  ${tmp#*.}/${tmp%.*}}]},"  >> $TMP_FILE
    fi
  done
  sort -u $TMP_FILE | grep -ve "^         {c:\[{v: 'Global'}, {v: 'Global'}," >> $PLOT_DIR/$FILE_NAME
  rm $TMP_FILE
else
  cat >> $PLOT_DIR/$FILE_NAME << EOF 
        cols: [ {id: 'A', label: 'Site', type: 'string'},
                {id: 'B', label: '# of jobs', type: 'number'}],
        rows: [
EOF
  if [ "x$PLOT_LABEL" == "xnumber" ]; then
    for i in $input_data; do
      tmp=${i%,*}
      echo "         {c:[{v: '${i#*,} (${tmp%.*})'}, {v: ${tmp%.*}}]},"  >> $PLOT_DIR/$FILE_NAME
    done
  else
    for i in $input_data; do
      tmp=${i%,*}
      echo "         {c:[{v: '${i#*,}'}, {v: ${tmp%.*}}]},"  >> $PLOT_DIR/$FILE_NAME
    done
  fi
fi
cat >> $PLOT_DIR/$FILE_NAME << EOF 
        ]});

        // Set chart options
        var options = {'title':'$PLOT_TITLE',
                       'width':$PLOT_WIDTH,
                       'height':$PLOT_HEIGHT,
EOF

if [ "x$PLOT_TYPE" == "xTreeMap" ]; then
  cat >> $PLOT_DIR/$FILE_NAME << EOF 
    //green
    minColor: '#0d0',
    midColor: '#ddd',
    //maxColor: 'red',
    maxColor: 'yellow',
    headerHeight: 0,
    fontColor: 'black',
    showScale: true,
EOF
fi

cat >> $PLOT_DIR/$FILE_NAME << EOF 
                      };
        // Instantiate and draw our chart, passing in some options.
        var chart = new google.visualization.$PLOT_TYPE(document.getElementById('chart_div'));
        chart.draw(data, options);
      }
    </script>
  </head>

  <body>
    <!--Div that will hold the pie chart-->
    <div id="chart_div"></div>
  </body>
</html>
EOF
